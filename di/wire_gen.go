// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"automatic-doodle/ent"
	"automatic-doodle/modules/access-token/service"
	"automatic-doodle/modules/auth/middleware"
	rest2 "automatic-doodle/modules/auth/rest"
	service2 "automatic-doodle/modules/auth/service"
	"automatic-doodle/modules/refresh-token/factory"
	"automatic-doodle/modules/refresh-token/repository"
	"automatic-doodle/modules/router"
	factory2 "automatic-doodle/modules/user/factory"
	repository2 "automatic-doodle/modules/user/repository"
	"automatic-doodle/modules/user/rest"
	"automatic-doodle/pkg/config"
	"automatic-doodle/pkg/encryption"
	"automatic-doodle/pkg/logger"
	"automatic-doodle/pkg/postgres"
	"automatic-doodle/pkg/server"
)

// Injectors from wire.go:

func DBBuilder() *ent.Client {
	logger := _wireLoggerValue
	configLogger := _wireLoggerLoggerValue
	configModule := config.New(configLogger)
	client := postgres.New(logger, configModule)
	return client
}

var (
	_wireLoggerValue       = logger.New("PostgresModule")
	_wireLoggerLoggerValue = logger.New("ConfigModule")
)

func Wire(db *ent.Client) *server.Server {
	configLogger := _wireLoggerLoggerValue
	configModule := config.New(configLogger)
	serverLogger := _wireLoggerValue2
	middlewareLogger := _wireLoggerValue3
	serviceLogger := _wireLoggerValue4
	encryptionLogger := _wireLoggerValue5
	encryptionModule := encryption.New(configModule, encryptionLogger)
	logger2 := _wireLoggerValue6
	serviceService := service.New(configModule, logger2)
	repositoryRepository := repository.New(db)
	factoryFactory := factory.New(db, encryptionModule)
	userFactory := factory2.New(db)
	userRepository := repository2.New(db)
	service3 := service2.New(serviceLogger, encryptionModule, serviceService, repositoryRepository, factoryFactory, userFactory, userRepository)
	middlewareMiddleware := middleware.New(middlewareLogger, service3)
	restRest := rest.New(middlewareMiddleware)
	restLogger := _wireLoggerValue7
	rest3 := rest2.New(restLogger, service3, middlewareMiddleware)
	routerRouter := router.New(restRest, rest3)
	serverServer := server.New(configModule, serverLogger, routerRouter)
	return serverServer
}

var (
	_wireLoggerValue2 = logger.New("ServerModule")
	_wireLoggerValue3 = logger.New("Authentication Middleware Logger")
	_wireLoggerValue4 = logger.New("AuthenticationService")
	_wireLoggerValue5 = logger.New("EncryptionModule")
	_wireLoggerValue6 = logger.New("AccessTokenService")
	_wireLoggerValue7 = logger.New("AuthRestLogger")
)
