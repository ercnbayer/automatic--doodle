// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"automatic-doodle/ent"
	"automatic-doodle/modules/access-token/service"
	"automatic-doodle/modules/auth/middleware"
	rest2 "automatic-doodle/modules/auth/rest"
	service2 "automatic-doodle/modules/auth/service"
	factory3 "automatic-doodle/modules/file/factory"
	repository3 "automatic-doodle/modules/file/repository"
	rest4 "automatic-doodle/modules/file/rest"
	service4 "automatic-doodle/modules/file/service"
	factory4 "automatic-doodle/modules/job/factory"
	repository4 "automatic-doodle/modules/job/repository"
	rest5 "automatic-doodle/modules/job/rest"
	rest3 "automatic-doodle/modules/profile/rest"
	"automatic-doodle/modules/refresh-token/factory"
	"automatic-doodle/modules/refresh-token/repository"
	"automatic-doodle/modules/router"
	factory2 "automatic-doodle/modules/user/factory"
	repository2 "automatic-doodle/modules/user/repository"
	"automatic-doodle/modules/user/rest"
	service3 "automatic-doodle/modules/user/service"
	"automatic-doodle/pkg/config"
	"automatic-doodle/pkg/encryption"
	"automatic-doodle/pkg/logger"
	"automatic-doodle/pkg/postgres"
	"automatic-doodle/pkg/s3_client"
	"automatic-doodle/pkg/server"
)

// Injectors from wire.go:

func DBBuilder() *ent.Client {
	logger := _wireLoggerValue
	configLogger := _wireLoggerLoggerValue
	configModule := config.New(configLogger)
	client := postgres.New(logger, configModule)
	return client
}

var (
	_wireLoggerValue       = logger.New("PostgresModule")
	_wireLoggerLoggerValue = logger.New("ConfigModule")
)

func Wire(db *ent.Client) *server.Server {
	configLogger := _wireLoggerLoggerValue
	configModule := config.New(configLogger)
	serverLogger := _wireLoggerValue2
	middlewareLogger := _wireLoggerValue3
	serviceLogger := _wireLoggerValue4
	encryptionLogger := _wireLoggerValue5
	encryptionModule := encryption.New(configModule, encryptionLogger)
	logger2 := _wireLoggerValue6
	serviceService := service.New(configModule, logger2)
	repositoryRepository := repository.New(db)
	factoryFactory := factory.New(db, encryptionModule)
	userFactory := factory2.New(db)
	userRepository := repository2.New(db)
	service5 := service2.New(serviceLogger, encryptionModule, serviceService, repositoryRepository, factoryFactory, userFactory, userRepository)
	middlewareMiddleware := middleware.New(middlewareLogger, service5)
	restRest := rest.New(middlewareMiddleware)
	restLogger := _wireLoggerValue7
	rest6 := rest2.New(restLogger, service5, middlewareMiddleware)
	factory5 := factory3.New(db)
	repository5 := repository3.New(db)
	userService := service3.New(userRepository, userFactory, factory5, repository5)
	logger3 := _wireLoggerValue8
	rest7 := rest3.New(middlewareMiddleware, userService, logger3)
	logger4 := _wireLoggerValue9
	logger5 := _wireLoggerValue10
	s3clientLogger := _wireLoggerValue11
	s3clientService := s3client.New(s3clientLogger, configModule)
	service6 := service4.New(logger5, repository5, factory5, s3clientService)
	rest8 := rest4.New(logger4, service6, middlewareMiddleware)
	factory6 := factory4.New(db)
	repository6 := repository4.New(db)
	logger6 := _wireLoggerValue12
	rest9 := rest5.New(middlewareMiddleware, factory6, repository6, logger6)
	routerRouter := router.New(restRest, rest6, rest7, rest8, rest9)
	serverServer := server.New(configModule, serverLogger, routerRouter)
	return serverServer
}

var (
	_wireLoggerValue2  = logger.New("ServerModule")
	_wireLoggerValue3  = logger.New("Authentication Middleware Logger")
	_wireLoggerValue4  = logger.New("AuthenticationService")
	_wireLoggerValue5  = logger.New("EncryptionModule")
	_wireLoggerValue6  = logger.New("AccessTokenService")
	_wireLoggerValue7  = logger.New("AuthRestLogger")
	_wireLoggerValue8  = logger.New("logger")
	_wireLoggerValue9  = logger.New("FileRest")
	_wireLoggerValue10 = logger.New("FileService")
	_wireLoggerValue11 = logger.New("S3Client")
	_wireLoggerValue12 = logger.New("JOB API LOGGER")
)
