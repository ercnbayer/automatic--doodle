// Code generated by ent, DO NOT EDIT.

package job

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the job type in the database.
	Label = "job"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldFee holds the string denoting the fee field in the database.
	FieldFee = "fee"
	// FieldJobType holds the string denoting the job_type field in the database.
	FieldJobType = "job_type"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldJobOwner holds the string denoting the job_owner field in the database.
	FieldJobOwner = "job_owner"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeJobappl holds the string denoting the jobappl edge name in mutations.
	EdgeJobappl = "jobappl"
	// Table holds the table name of the job in the database.
	Table = "jobs"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "jobs"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "job_owner"
	// JobapplTable is the table that holds the jobappl relation/edge.
	JobapplTable = "job_applications"
	// JobapplInverseTable is the table name for the JobApplication entity.
	// It exists in this package in order to avoid circular dependency with the "jobapplication" package.
	JobapplInverseTable = "job_applications"
	// JobapplColumn is the table column denoting the jobappl relation/edge.
	JobapplColumn = "job_id"
)

// Columns holds all SQL columns for job fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldStartDate,
	FieldEndDate,
	FieldFee,
	FieldJobType,
	FieldDescription,
	FieldJobOwner,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// FeeValidator is a validator for the "fee" field. It is called by the builders before save.
	FeeValidator func(int) error
	// JobTypeValidator is a validator for the "job_type" field. It is called by the builders before save.
	JobTypeValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Job queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByEndDate orders the results by the end_date field.
func ByEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDate, opts...).ToFunc()
}

// ByFee orders the results by the fee field.
func ByFee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFee, opts...).ToFunc()
}

// ByJobType orders the results by the job_type field.
func ByJobType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobType, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByJobOwner orders the results by the job_owner field.
func ByJobOwner(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobOwner, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByJobapplCount orders the results by jobappl count.
func ByJobapplCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJobapplStep(), opts...)
	}
}

// ByJobappl orders the results by jobappl terms.
func ByJobappl(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobapplStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newJobapplStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobapplInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, JobapplTable, JobapplColumn),
	)
}
