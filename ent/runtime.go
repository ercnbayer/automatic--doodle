// Code generated by ent, DO NOT EDIT.

package ent

import (
	"automatic-doodle/ent/file"
	"automatic-doodle/ent/job"
	"automatic-doodle/ent/jobapplication"
	"automatic-doodle/ent/messages"
	"automatic-doodle/ent/refreshtoken"
	"automatic-doodle/ent/schema"
	"automatic-doodle/ent/user"
	"time"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	fileFields := schema.File{}.Fields()
	_ = fileFields
	// fileDescFilename is the schema descriptor for filename field.
	fileDescFilename := fileFields[1].Descriptor()
	// file.FilenameValidator is a validator for the "filename" field. It is called by the builders before save.
	file.FilenameValidator = func() func(string) error {
		validators := fileDescFilename.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(filename string) error {
			for _, fn := range fns {
				if err := fn(filename); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fileDescExtention is the schema descriptor for extention field.
	fileDescExtention := fileFields[2].Descriptor()
	// file.ExtentionValidator is a validator for the "extention" field. It is called by the builders before save.
	file.ExtentionValidator = func() func(string) error {
		validators := fileDescExtention.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(extention string) error {
			for _, fn := range fns {
				if err := fn(extention); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fileDescCreatedAt is the schema descriptor for created_at field.
	fileDescCreatedAt := fileFields[4].Descriptor()
	// file.DefaultCreatedAt holds the default value on creation for the created_at field.
	file.DefaultCreatedAt = fileDescCreatedAt.Default.(func() time.Time)
	// fileDescBucket is the schema descriptor for bucket field.
	fileDescBucket := fileFields[6].Descriptor()
	// file.BucketValidator is a validator for the "bucket" field. It is called by the builders before save.
	file.BucketValidator = func() func(string) error {
		validators := fileDescBucket.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(bucket string) error {
			for _, fn := range fns {
				if err := fn(bucket); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fileDescUpdatedAt is the schema descriptor for updated_at field.
	fileDescUpdatedAt := fileFields[7].Descriptor()
	// file.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	file.DefaultUpdatedAt = fileDescUpdatedAt.Default.(func() time.Time)
	// file.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	file.UpdateDefaultUpdatedAt = fileDescUpdatedAt.UpdateDefault.(func() time.Time)
	// fileDescContentType is the schema descriptor for content_type field.
	fileDescContentType := fileFields[8].Descriptor()
	// file.ContentTypeValidator is a validator for the "content_type" field. It is called by the builders before save.
	file.ContentTypeValidator = func() func(string) error {
		validators := fileDescContentType.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(content_type string) error {
			for _, fn := range fns {
				if err := fn(content_type); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// fileDescID is the schema descriptor for id field.
	fileDescID := fileFields[0].Descriptor()
	// file.DefaultID holds the default value on creation for the id field.
	file.DefaultID = fileDescID.Default.(func() uuid.UUID)
	jobFields := schema.Job{}.Fields()
	_ = jobFields
	// jobDescCreatedAt is the schema descriptor for created_at field.
	jobDescCreatedAt := jobFields[1].Descriptor()
	// job.DefaultCreatedAt holds the default value on creation for the created_at field.
	job.DefaultCreatedAt = jobDescCreatedAt.Default.(func() time.Time)
	// jobDescFee is the schema descriptor for fee field.
	jobDescFee := jobFields[4].Descriptor()
	// job.FeeValidator is a validator for the "fee" field. It is called by the builders before save.
	job.FeeValidator = jobDescFee.Validators[0].(func(int) error)
	// jobDescJobType is the schema descriptor for job_type field.
	jobDescJobType := jobFields[5].Descriptor()
	// job.JobTypeValidator is a validator for the "job_type" field. It is called by the builders before save.
	job.JobTypeValidator = func() func(string) error {
		validators := jobDescJobType.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(job_type string) error {
			for _, fn := range fns {
				if err := fn(job_type); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// jobDescDescription is the schema descriptor for description field.
	jobDescDescription := jobFields[6].Descriptor()
	// job.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	job.DescriptionValidator = func() func(string) error {
		validators := jobDescDescription.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(description string) error {
			for _, fn := range fns {
				if err := fn(description); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// jobDescID is the schema descriptor for id field.
	jobDescID := jobFields[0].Descriptor()
	// job.DefaultID holds the default value on creation for the id field.
	job.DefaultID = jobDescID.Default.(func() uuid.UUID)
	jobapplicationFields := schema.JobApplication{}.Fields()
	_ = jobapplicationFields
	// jobapplicationDescDescription is the schema descriptor for description field.
	jobapplicationDescDescription := jobapplicationFields[1].Descriptor()
	// jobapplication.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	jobapplication.DescriptionValidator = jobapplicationDescDescription.Validators[0].(func(string) error)
	// jobapplicationDescID is the schema descriptor for id field.
	jobapplicationDescID := jobapplicationFields[0].Descriptor()
	// jobapplication.DefaultID holds the default value on creation for the id field.
	jobapplication.DefaultID = jobapplicationDescID.Default.(func() uuid.UUID)
	messagesFields := schema.Messages{}.Fields()
	_ = messagesFields
	// messagesDescMessage is the schema descriptor for message field.
	messagesDescMessage := messagesFields[3].Descriptor()
	// messages.MessageValidator is a validator for the "message" field. It is called by the builders before save.
	messages.MessageValidator = messagesDescMessage.Validators[0].(func(string) error)
	// messagesDescCreatedAt is the schema descriptor for created_at field.
	messagesDescCreatedAt := messagesFields[4].Descriptor()
	// messages.DefaultCreatedAt holds the default value on creation for the created_at field.
	messages.DefaultCreatedAt = messagesDescCreatedAt.Default.(func() time.Time)
	// messagesDescID is the schema descriptor for id field.
	messagesDescID := messagesFields[0].Descriptor()
	// messages.DefaultID holds the default value on creation for the id field.
	messages.DefaultID = messagesDescID.Default.(func() uuid.UUID)
	refreshtokenFields := schema.RefreshToken{}.Fields()
	_ = refreshtokenFields
	// refreshtokenDescToken is the schema descriptor for token field.
	refreshtokenDescToken := refreshtokenFields[1].Descriptor()
	// refreshtoken.TokenValidator is a validator for the "token" field. It is called by the builders before save.
	refreshtoken.TokenValidator = func() func(string) error {
		validators := refreshtokenDescToken.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(token string) error {
			for _, fn := range fns {
				if err := fn(token); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// refreshtokenDescIsClaimed is the schema descriptor for is_claimed field.
	refreshtokenDescIsClaimed := refreshtokenFields[2].Descriptor()
	// refreshtoken.DefaultIsClaimed holds the default value on creation for the is_claimed field.
	refreshtoken.DefaultIsClaimed = refreshtokenDescIsClaimed.Default.(bool)
	// refreshtokenDescCreatedAt is the schema descriptor for created_at field.
	refreshtokenDescCreatedAt := refreshtokenFields[5].Descriptor()
	// refreshtoken.DefaultCreatedAt holds the default value on creation for the created_at field.
	refreshtoken.DefaultCreatedAt = refreshtokenDescCreatedAt.Default.(func() time.Time)
	// refreshtokenDescUpdatedAt is the schema descriptor for updated_at field.
	refreshtokenDescUpdatedAt := refreshtokenFields[6].Descriptor()
	// refreshtoken.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	refreshtoken.DefaultUpdatedAt = refreshtokenDescUpdatedAt.Default.(func() time.Time)
	// refreshtoken.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	refreshtoken.UpdateDefaultUpdatedAt = refreshtokenDescUpdatedAt.UpdateDefault.(func() time.Time)
	// refreshtokenDescID is the schema descriptor for id field.
	refreshtokenDescID := refreshtokenFields[0].Descriptor()
	// refreshtoken.DefaultID holds the default value on creation for the id field.
	refreshtoken.DefaultID = refreshtokenDescID.Default.(func() uuid.UUID)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescPhoneNumber is the schema descriptor for phone_number field.
	userDescPhoneNumber := userFields[1].Descriptor()
	// user.PhoneNumberValidator is a validator for the "phone_number" field. It is called by the builders before save.
	user.PhoneNumberValidator = func() func(string) error {
		validators := userDescPhoneNumber.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(phone_number string) error {
			for _, fn := range fns {
				if err := fn(phone_number); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[2].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescFirstName is the schema descriptor for first_name field.
	userDescFirstName := userFields[3].Descriptor()
	// user.FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	user.FirstNameValidator = userDescFirstName.Validators[0].(func(string) error)
	// userDescLastName is the schema descriptor for last_name field.
	userDescLastName := userFields[4].Descriptor()
	// user.LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	user.LastNameValidator = userDescLastName.Validators[0].(func(string) error)
	// userDescPasswordSalt is the schema descriptor for password_salt field.
	userDescPasswordSalt := userFields[7].Descriptor()
	// user.PasswordSaltValidator is a validator for the "password_salt" field. It is called by the builders before save.
	user.PasswordSaltValidator = userDescPasswordSalt.Validators[0].(func(string) error)
	// userDescPasswordHash is the schema descriptor for password_hash field.
	userDescPasswordHash := userFields[8].Descriptor()
	// user.PasswordHashValidator is a validator for the "password_hash" field. It is called by the builders before save.
	user.PasswordHashValidator = userDescPasswordHash.Validators[0].(func(string) error)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[9].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[10].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
