// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// FilesColumns holds the columns for the "files" table.
	FilesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "filename", Type: field.TypeString, Size: 255},
		{Name: "extention", Type: field.TypeString, Size: 10},
		{Name: "created_by_id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"PROFILE_IMAGE", "COVER_IMAGE", "POST_FILE"}},
		{Name: "bucket", Type: field.TypeString, Size: 255},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "content_type", Type: field.TypeString, Size: 255},
	}
	// FilesTable holds the schema information for the "files" table.
	FilesTable = &schema.Table{
		Name:       "files",
		Columns:    FilesColumns,
		PrimaryKey: []*schema.Column{FilesColumns[0]},
	}
	// JobsColumns holds the columns for the "jobs" table.
	JobsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "start_date", Type: field.TypeTime, Nullable: true},
		{Name: "end_date", Type: field.TypeTime, Nullable: true},
		{Name: "fee", Type: field.TypeInt},
		{Name: "job_type", Type: field.TypeString, Size: 255},
		{Name: "description", Type: field.TypeString, Size: 1024},
		{Name: "user_jobs", Type: field.TypeUUID},
	}
	// JobsTable holds the schema information for the "jobs" table.
	JobsTable = &schema.Table{
		Name:       "jobs",
		Columns:    JobsColumns,
		PrimaryKey: []*schema.Column{JobsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "jobs_users_jobs",
				Columns:    []*schema.Column{JobsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// JobApplicationsColumns holds the columns for the "job_applications" table.
	JobApplicationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "description", Type: field.TypeString, Size: 1024},
		{Name: "file_id", Type: field.TypeUUID},
		{Name: "job_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// JobApplicationsTable holds the schema information for the "job_applications" table.
	JobApplicationsTable = &schema.Table{
		Name:       "job_applications",
		Columns:    JobApplicationsColumns,
		PrimaryKey: []*schema.Column{JobApplicationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "job_applications_files_jobappl",
				Columns:    []*schema.Column{JobApplicationsColumns[2]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "job_applications_jobs_jobappl",
				Columns:    []*schema.Column{JobApplicationsColumns[3]},
				RefColumns: []*schema.Column{JobsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "job_applications_users_jobappl",
				Columns:    []*schema.Column{JobApplicationsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// RefreshTokensColumns holds the columns for the "refresh_tokens" table.
	RefreshTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "token", Type: field.TypeString, Unique: true, Size: 255},
		{Name: "is_claimed", Type: field.TypeBool, Default: false},
		{Name: "expired_at", Type: field.TypeTime},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// RefreshTokensTable holds the schema information for the "refresh_tokens" table.
	RefreshTokensTable = &schema.Table{
		Name:       "refresh_tokens",
		Columns:    RefreshTokensColumns,
		PrimaryKey: []*schema.Column{RefreshTokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "refresh_tokens_users_refresh_tokens",
				Columns:    []*schema.Column{RefreshTokensColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "phone_number", Type: field.TypeString, Unique: true, Size: 255},
		{Name: "email", Type: field.TypeString, Size: 255},
		{Name: "first_name", Type: field.TypeString, Size: 255},
		{Name: "last_name", Type: field.TypeString, Size: 255},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"CUSTOMER", "ADMIN"}},
		{Name: "state", Type: field.TypeEnum, Enums: []string{"ACTIVE", "DEACTIVE"}},
		{Name: "password_salt", Type: field.TypeString},
		{Name: "password_hash", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_profile_image", Type: field.TypeUUID, Nullable: true},
		{Name: "user_cover_image", Type: field.TypeUUID, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_files_profile_image",
				Columns:    []*schema.Column{UsersColumns[11]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "users_files_cover_image",
				Columns:    []*schema.Column{UsersColumns[12]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		FilesTable,
		JobsTable,
		JobApplicationsTable,
		RefreshTokensTable,
		UsersTable,
	}
)

func init() {
	JobsTable.ForeignKeys[0].RefTable = UsersTable
	JobApplicationsTable.ForeignKeys[0].RefTable = FilesTable
	JobApplicationsTable.ForeignKeys[1].RefTable = JobsTable
	JobApplicationsTable.ForeignKeys[2].RefTable = UsersTable
	RefreshTokensTable.ForeignKeys[0].RefTable = UsersTable
	UsersTable.ForeignKeys[0].RefTable = FilesTable
	UsersTable.ForeignKeys[1].RefTable = FilesTable
}
