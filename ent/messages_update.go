// Code generated by ent, DO NOT EDIT.

package ent

import (
	"automatic-doodle/ent/messages"
	"automatic-doodle/ent/predicate"
	"automatic-doodle/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MessagesUpdate is the builder for updating Messages entities.
type MessagesUpdate struct {
	config
	hooks    []Hook
	mutation *MessagesMutation
}

// Where appends a list predicates to the MessagesUpdate builder.
func (mu *MessagesUpdate) Where(ps ...predicate.Messages) *MessagesUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetFrom sets the "from" field.
func (mu *MessagesUpdate) SetFrom(u uuid.UUID) *MessagesUpdate {
	mu.mutation.SetFrom(u)
	return mu
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (mu *MessagesUpdate) SetNillableFrom(u *uuid.UUID) *MessagesUpdate {
	if u != nil {
		mu.SetFrom(*u)
	}
	return mu
}

// SetTo sets the "to" field.
func (mu *MessagesUpdate) SetTo(u uuid.UUID) *MessagesUpdate {
	mu.mutation.SetTo(u)
	return mu
}

// SetNillableTo sets the "to" field if the given value is not nil.
func (mu *MessagesUpdate) SetNillableTo(u *uuid.UUID) *MessagesUpdate {
	if u != nil {
		mu.SetTo(*u)
	}
	return mu
}

// SetMessage sets the "message" field.
func (mu *MessagesUpdate) SetMessage(s string) *MessagesUpdate {
	mu.mutation.SetMessage(s)
	return mu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (mu *MessagesUpdate) SetNillableMessage(s *string) *MessagesUpdate {
	if s != nil {
		mu.SetMessage(*s)
	}
	return mu
}

// SetSenderID sets the "sender" edge to the User entity by ID.
func (mu *MessagesUpdate) SetSenderID(id uuid.UUID) *MessagesUpdate {
	mu.mutation.SetSenderID(id)
	return mu
}

// SetSender sets the "sender" edge to the User entity.
func (mu *MessagesUpdate) SetSender(u *User) *MessagesUpdate {
	return mu.SetSenderID(u.ID)
}

// SetReceiverID sets the "receiver" edge to the User entity by ID.
func (mu *MessagesUpdate) SetReceiverID(id uuid.UUID) *MessagesUpdate {
	mu.mutation.SetReceiverID(id)
	return mu
}

// SetReceiver sets the "receiver" edge to the User entity.
func (mu *MessagesUpdate) SetReceiver(u *User) *MessagesUpdate {
	return mu.SetReceiverID(u.ID)
}

// Mutation returns the MessagesMutation object of the builder.
func (mu *MessagesUpdate) Mutation() *MessagesMutation {
	return mu.mutation
}

// ClearSender clears the "sender" edge to the User entity.
func (mu *MessagesUpdate) ClearSender() *MessagesUpdate {
	mu.mutation.ClearSender()
	return mu
}

// ClearReceiver clears the "receiver" edge to the User entity.
func (mu *MessagesUpdate) ClearReceiver() *MessagesUpdate {
	mu.mutation.ClearReceiver()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MessagesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MessagesUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MessagesUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MessagesUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MessagesUpdate) check() error {
	if v, ok := mu.mutation.Message(); ok {
		if err := messages.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "Messages.message": %w`, err)}
		}
	}
	if mu.mutation.SenderCleared() && len(mu.mutation.SenderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Messages.sender"`)
	}
	if mu.mutation.ReceiverCleared() && len(mu.mutation.ReceiverIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Messages.receiver"`)
	}
	return nil
}

func (mu *MessagesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(messages.Table, messages.Columns, sqlgraph.NewFieldSpec(messages.FieldID, field.TypeUUID))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Message(); ok {
		_spec.SetField(messages.FieldMessage, field.TypeString, value)
	}
	if mu.mutation.SenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messages.SenderTable,
			Columns: []string{messages.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messages.SenderTable,
			Columns: []string{messages.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ReceiverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messages.ReceiverTable,
			Columns: []string{messages.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ReceiverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messages.ReceiverTable,
			Columns: []string{messages.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messages.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MessagesUpdateOne is the builder for updating a single Messages entity.
type MessagesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessagesMutation
}

// SetFrom sets the "from" field.
func (muo *MessagesUpdateOne) SetFrom(u uuid.UUID) *MessagesUpdateOne {
	muo.mutation.SetFrom(u)
	return muo
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (muo *MessagesUpdateOne) SetNillableFrom(u *uuid.UUID) *MessagesUpdateOne {
	if u != nil {
		muo.SetFrom(*u)
	}
	return muo
}

// SetTo sets the "to" field.
func (muo *MessagesUpdateOne) SetTo(u uuid.UUID) *MessagesUpdateOne {
	muo.mutation.SetTo(u)
	return muo
}

// SetNillableTo sets the "to" field if the given value is not nil.
func (muo *MessagesUpdateOne) SetNillableTo(u *uuid.UUID) *MessagesUpdateOne {
	if u != nil {
		muo.SetTo(*u)
	}
	return muo
}

// SetMessage sets the "message" field.
func (muo *MessagesUpdateOne) SetMessage(s string) *MessagesUpdateOne {
	muo.mutation.SetMessage(s)
	return muo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (muo *MessagesUpdateOne) SetNillableMessage(s *string) *MessagesUpdateOne {
	if s != nil {
		muo.SetMessage(*s)
	}
	return muo
}

// SetSenderID sets the "sender" edge to the User entity by ID.
func (muo *MessagesUpdateOne) SetSenderID(id uuid.UUID) *MessagesUpdateOne {
	muo.mutation.SetSenderID(id)
	return muo
}

// SetSender sets the "sender" edge to the User entity.
func (muo *MessagesUpdateOne) SetSender(u *User) *MessagesUpdateOne {
	return muo.SetSenderID(u.ID)
}

// SetReceiverID sets the "receiver" edge to the User entity by ID.
func (muo *MessagesUpdateOne) SetReceiverID(id uuid.UUID) *MessagesUpdateOne {
	muo.mutation.SetReceiverID(id)
	return muo
}

// SetReceiver sets the "receiver" edge to the User entity.
func (muo *MessagesUpdateOne) SetReceiver(u *User) *MessagesUpdateOne {
	return muo.SetReceiverID(u.ID)
}

// Mutation returns the MessagesMutation object of the builder.
func (muo *MessagesUpdateOne) Mutation() *MessagesMutation {
	return muo.mutation
}

// ClearSender clears the "sender" edge to the User entity.
func (muo *MessagesUpdateOne) ClearSender() *MessagesUpdateOne {
	muo.mutation.ClearSender()
	return muo
}

// ClearReceiver clears the "receiver" edge to the User entity.
func (muo *MessagesUpdateOne) ClearReceiver() *MessagesUpdateOne {
	muo.mutation.ClearReceiver()
	return muo
}

// Where appends a list predicates to the MessagesUpdate builder.
func (muo *MessagesUpdateOne) Where(ps ...predicate.Messages) *MessagesUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MessagesUpdateOne) Select(field string, fields ...string) *MessagesUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Messages entity.
func (muo *MessagesUpdateOne) Save(ctx context.Context) (*Messages, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MessagesUpdateOne) SaveX(ctx context.Context) *Messages {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MessagesUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MessagesUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MessagesUpdateOne) check() error {
	if v, ok := muo.mutation.Message(); ok {
		if err := messages.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "Messages.message": %w`, err)}
		}
	}
	if muo.mutation.SenderCleared() && len(muo.mutation.SenderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Messages.sender"`)
	}
	if muo.mutation.ReceiverCleared() && len(muo.mutation.ReceiverIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Messages.receiver"`)
	}
	return nil
}

func (muo *MessagesUpdateOne) sqlSave(ctx context.Context) (_node *Messages, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(messages.Table, messages.Columns, sqlgraph.NewFieldSpec(messages.FieldID, field.TypeUUID))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Messages.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, messages.FieldID)
		for _, f := range fields {
			if !messages.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != messages.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Message(); ok {
		_spec.SetField(messages.FieldMessage, field.TypeString, value)
	}
	if muo.mutation.SenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messages.SenderTable,
			Columns: []string{messages.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messages.SenderTable,
			Columns: []string{messages.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ReceiverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messages.ReceiverTable,
			Columns: []string{messages.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ReceiverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messages.ReceiverTable,
			Columns: []string{messages.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Messages{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messages.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
