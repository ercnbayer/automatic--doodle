// Code generated by ent, DO NOT EDIT.

package ent

import (
	"automatic-doodle/ent/file"
	"automatic-doodle/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FileUpdate is the builder for updating File entities.
type FileUpdate struct {
	config
	hooks    []Hook
	mutation *FileMutation
}

// Where appends a list predicates to the FileUpdate builder.
func (fu *FileUpdate) Where(ps ...predicate.File) *FileUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetFilename sets the "filename" field.
func (fu *FileUpdate) SetFilename(s string) *FileUpdate {
	fu.mutation.SetFilename(s)
	return fu
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (fu *FileUpdate) SetNillableFilename(s *string) *FileUpdate {
	if s != nil {
		fu.SetFilename(*s)
	}
	return fu
}

// SetExtention sets the "extention" field.
func (fu *FileUpdate) SetExtention(s string) *FileUpdate {
	fu.mutation.SetExtention(s)
	return fu
}

// SetNillableExtention sets the "extention" field if the given value is not nil.
func (fu *FileUpdate) SetNillableExtention(s *string) *FileUpdate {
	if s != nil {
		fu.SetExtention(*s)
	}
	return fu
}

// SetCreatedByID sets the "created_by_id" field.
func (fu *FileUpdate) SetCreatedByID(u uuid.UUID) *FileUpdate {
	fu.mutation.SetCreatedByID(u)
	return fu
}

// SetNillableCreatedByID sets the "created_by_id" field if the given value is not nil.
func (fu *FileUpdate) SetNillableCreatedByID(u *uuid.UUID) *FileUpdate {
	if u != nil {
		fu.SetCreatedByID(*u)
	}
	return fu
}

// SetType sets the "type" field.
func (fu *FileUpdate) SetType(f file.Type) *FileUpdate {
	fu.mutation.SetType(f)
	return fu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fu *FileUpdate) SetNillableType(f *file.Type) *FileUpdate {
	if f != nil {
		fu.SetType(*f)
	}
	return fu
}

// SetBucket sets the "bucket" field.
func (fu *FileUpdate) SetBucket(s string) *FileUpdate {
	fu.mutation.SetBucket(s)
	return fu
}

// SetNillableBucket sets the "bucket" field if the given value is not nil.
func (fu *FileUpdate) SetNillableBucket(s *string) *FileUpdate {
	if s != nil {
		fu.SetBucket(*s)
	}
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FileUpdate) SetUpdatedAt(t time.Time) *FileUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// SetContentType sets the "content_type" field.
func (fu *FileUpdate) SetContentType(s string) *FileUpdate {
	fu.mutation.SetContentType(s)
	return fu
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (fu *FileUpdate) SetNillableContentType(s *string) *FileUpdate {
	if s != nil {
		fu.SetContentType(*s)
	}
	return fu
}

// Mutation returns the FileMutation object of the builder.
func (fu *FileUpdate) Mutation() *FileMutation {
	return fu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FileUpdate) Save(ctx context.Context) (int, error) {
	fu.defaults()
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FileUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FileUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FileUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FileUpdate) defaults() {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		v := file.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FileUpdate) check() error {
	if v, ok := fu.mutation.Filename(); ok {
		if err := file.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "File.filename": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Extention(); ok {
		if err := file.ExtentionValidator(v); err != nil {
			return &ValidationError{Name: "extention", err: fmt.Errorf(`ent: validator failed for field "File.extention": %w`, err)}
		}
	}
	if v, ok := fu.mutation.GetType(); ok {
		if err := file.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "File.type": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Bucket(); ok {
		if err := file.BucketValidator(v); err != nil {
			return &ValidationError{Name: "bucket", err: fmt.Errorf(`ent: validator failed for field "File.bucket": %w`, err)}
		}
	}
	if v, ok := fu.mutation.ContentType(); ok {
		if err := file.ContentTypeValidator(v); err != nil {
			return &ValidationError{Name: "content_type", err: fmt.Errorf(`ent: validator failed for field "File.content_type": %w`, err)}
		}
	}
	return nil
}

func (fu *FileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Filename(); ok {
		_spec.SetField(file.FieldFilename, field.TypeString, value)
	}
	if value, ok := fu.mutation.Extention(); ok {
		_spec.SetField(file.FieldExtention, field.TypeString, value)
	}
	if value, ok := fu.mutation.CreatedByID(); ok {
		_spec.SetField(file.FieldCreatedByID, field.TypeUUID, value)
	}
	if value, ok := fu.mutation.GetType(); ok {
		_spec.SetField(file.FieldType, field.TypeEnum, value)
	}
	if value, ok := fu.mutation.Bucket(); ok {
		_spec.SetField(file.FieldBucket, field.TypeString, value)
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(file.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fu.mutation.ContentType(); ok {
		_spec.SetField(file.FieldContentType, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FileUpdateOne is the builder for updating a single File entity.
type FileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileMutation
}

// SetFilename sets the "filename" field.
func (fuo *FileUpdateOne) SetFilename(s string) *FileUpdateOne {
	fuo.mutation.SetFilename(s)
	return fuo
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableFilename(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetFilename(*s)
	}
	return fuo
}

// SetExtention sets the "extention" field.
func (fuo *FileUpdateOne) SetExtention(s string) *FileUpdateOne {
	fuo.mutation.SetExtention(s)
	return fuo
}

// SetNillableExtention sets the "extention" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableExtention(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetExtention(*s)
	}
	return fuo
}

// SetCreatedByID sets the "created_by_id" field.
func (fuo *FileUpdateOne) SetCreatedByID(u uuid.UUID) *FileUpdateOne {
	fuo.mutation.SetCreatedByID(u)
	return fuo
}

// SetNillableCreatedByID sets the "created_by_id" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableCreatedByID(u *uuid.UUID) *FileUpdateOne {
	if u != nil {
		fuo.SetCreatedByID(*u)
	}
	return fuo
}

// SetType sets the "type" field.
func (fuo *FileUpdateOne) SetType(f file.Type) *FileUpdateOne {
	fuo.mutation.SetType(f)
	return fuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableType(f *file.Type) *FileUpdateOne {
	if f != nil {
		fuo.SetType(*f)
	}
	return fuo
}

// SetBucket sets the "bucket" field.
func (fuo *FileUpdateOne) SetBucket(s string) *FileUpdateOne {
	fuo.mutation.SetBucket(s)
	return fuo
}

// SetNillableBucket sets the "bucket" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableBucket(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetBucket(*s)
	}
	return fuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FileUpdateOne) SetUpdatedAt(t time.Time) *FileUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// SetContentType sets the "content_type" field.
func (fuo *FileUpdateOne) SetContentType(s string) *FileUpdateOne {
	fuo.mutation.SetContentType(s)
	return fuo
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableContentType(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetContentType(*s)
	}
	return fuo
}

// Mutation returns the FileMutation object of the builder.
func (fuo *FileUpdateOne) Mutation() *FileMutation {
	return fuo.mutation
}

// Where appends a list predicates to the FileUpdate builder.
func (fuo *FileUpdateOne) Where(ps ...predicate.File) *FileUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FileUpdateOne) Select(field string, fields ...string) *FileUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated File entity.
func (fuo *FileUpdateOne) Save(ctx context.Context) (*File, error) {
	fuo.defaults()
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FileUpdateOne) SaveX(ctx context.Context) *File {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FileUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FileUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FileUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		v := file.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FileUpdateOne) check() error {
	if v, ok := fuo.mutation.Filename(); ok {
		if err := file.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "File.filename": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Extention(); ok {
		if err := file.ExtentionValidator(v); err != nil {
			return &ValidationError{Name: "extention", err: fmt.Errorf(`ent: validator failed for field "File.extention": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.GetType(); ok {
		if err := file.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "File.type": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Bucket(); ok {
		if err := file.BucketValidator(v); err != nil {
			return &ValidationError{Name: "bucket", err: fmt.Errorf(`ent: validator failed for field "File.bucket": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.ContentType(); ok {
		if err := file.ContentTypeValidator(v); err != nil {
			return &ValidationError{Name: "content_type", err: fmt.Errorf(`ent: validator failed for field "File.content_type": %w`, err)}
		}
	}
	return nil
}

func (fuo *FileUpdateOne) sqlSave(ctx context.Context) (_node *File, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "File.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, file.FieldID)
		for _, f := range fields {
			if !file.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != file.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Filename(); ok {
		_spec.SetField(file.FieldFilename, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Extention(); ok {
		_spec.SetField(file.FieldExtention, field.TypeString, value)
	}
	if value, ok := fuo.mutation.CreatedByID(); ok {
		_spec.SetField(file.FieldCreatedByID, field.TypeUUID, value)
	}
	if value, ok := fuo.mutation.GetType(); ok {
		_spec.SetField(file.FieldType, field.TypeEnum, value)
	}
	if value, ok := fuo.mutation.Bucket(); ok {
		_spec.SetField(file.FieldBucket, field.TypeString, value)
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(file.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.ContentType(); ok {
		_spec.SetField(file.FieldContentType, field.TypeString, value)
	}
	_node = &File{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
