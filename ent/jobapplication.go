// Code generated by ent, DO NOT EDIT.

package ent

import (
	"automatic-doodle/ent/job"
	"automatic-doodle/ent/jobapplication"
	"automatic-doodle/ent/user"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// JobApplication is the model entity for the JobApplication schema.
type JobApplication struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// JobID holds the value of the "job_id" field.
	JobID uuid.UUID `json:"job_id,omitempty"`
	// ObjectKey holds the value of the "object_key" field.
	ObjectKey string `json:"object_key,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobApplicationQuery when eager-loading is set.
	Edges        JobApplicationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// JobApplicationEdges holds the relations/edges for other nodes in the graph.
type JobApplicationEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Job holds the value of the job edge.
	Job *Job `json:"job,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobApplicationEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// JobOrErr returns the Job value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobApplicationEdges) JobOrErr() (*Job, error) {
	if e.Job != nil {
		return e.Job, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: job.Label}
	}
	return nil, &NotLoadedError{edge: "job"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JobApplication) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case jobapplication.FieldDescription, jobapplication.FieldObjectKey:
			values[i] = new(sql.NullString)
		case jobapplication.FieldID, jobapplication.FieldUserID, jobapplication.FieldJobID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JobApplication fields.
func (ja *JobApplication) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jobapplication.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ja.ID = *value
			}
		case jobapplication.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ja.Description = value.String
			}
		case jobapplication.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				ja.UserID = *value
			}
		case jobapplication.FieldJobID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field job_id", values[i])
			} else if value != nil {
				ja.JobID = *value
			}
		case jobapplication.FieldObjectKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field object_key", values[i])
			} else if value.Valid {
				ja.ObjectKey = value.String
			}
		default:
			ja.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the JobApplication.
// This includes values selected through modifiers, order, etc.
func (ja *JobApplication) Value(name string) (ent.Value, error) {
	return ja.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the JobApplication entity.
func (ja *JobApplication) QueryUser() *UserQuery {
	return NewJobApplicationClient(ja.config).QueryUser(ja)
}

// QueryJob queries the "job" edge of the JobApplication entity.
func (ja *JobApplication) QueryJob() *JobQuery {
	return NewJobApplicationClient(ja.config).QueryJob(ja)
}

// Update returns a builder for updating this JobApplication.
// Note that you need to call JobApplication.Unwrap() before calling this method if this JobApplication
// was returned from a transaction, and the transaction was committed or rolled back.
func (ja *JobApplication) Update() *JobApplicationUpdateOne {
	return NewJobApplicationClient(ja.config).UpdateOne(ja)
}

// Unwrap unwraps the JobApplication entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ja *JobApplication) Unwrap() *JobApplication {
	_tx, ok := ja.config.driver.(*txDriver)
	if !ok {
		panic("ent: JobApplication is not a transactional entity")
	}
	ja.config.driver = _tx.drv
	return ja
}

// String implements the fmt.Stringer.
func (ja *JobApplication) String() string {
	var builder strings.Builder
	builder.WriteString("JobApplication(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ja.ID))
	builder.WriteString("description=")
	builder.WriteString(ja.Description)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ja.UserID))
	builder.WriteString(", ")
	builder.WriteString("job_id=")
	builder.WriteString(fmt.Sprintf("%v", ja.JobID))
	builder.WriteString(", ")
	builder.WriteString("object_key=")
	builder.WriteString(ja.ObjectKey)
	builder.WriteByte(')')
	return builder.String()
}

// JobApplications is a parsable slice of JobApplication.
type JobApplications []*JobApplication
