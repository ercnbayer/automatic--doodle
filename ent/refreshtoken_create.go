// Code generated by ent, DO NOT EDIT.

package ent

import (
	"automatic-doodle/ent/refreshtoken"
	"automatic-doodle/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// RefreshTokenCreate is the builder for creating a RefreshToken entity.
type RefreshTokenCreate struct {
	config
	mutation *RefreshTokenMutation
	hooks    []Hook
}

// SetToken sets the "token" field.
func (rtc *RefreshTokenCreate) SetToken(s string) *RefreshTokenCreate {
	rtc.mutation.SetToken(s)
	return rtc
}

// SetIsClaimed sets the "is_claimed" field.
func (rtc *RefreshTokenCreate) SetIsClaimed(b bool) *RefreshTokenCreate {
	rtc.mutation.SetIsClaimed(b)
	return rtc
}

// SetNillableIsClaimed sets the "is_claimed" field if the given value is not nil.
func (rtc *RefreshTokenCreate) SetNillableIsClaimed(b *bool) *RefreshTokenCreate {
	if b != nil {
		rtc.SetIsClaimed(*b)
	}
	return rtc
}

// SetExpiredAt sets the "expired_at" field.
func (rtc *RefreshTokenCreate) SetExpiredAt(t time.Time) *RefreshTokenCreate {
	rtc.mutation.SetExpiredAt(t)
	return rtc
}

// SetUserID sets the "user_id" field.
func (rtc *RefreshTokenCreate) SetUserID(u uuid.UUID) *RefreshTokenCreate {
	rtc.mutation.SetUserID(u)
	return rtc
}

// SetCreatedAt sets the "created_at" field.
func (rtc *RefreshTokenCreate) SetCreatedAt(t time.Time) *RefreshTokenCreate {
	rtc.mutation.SetCreatedAt(t)
	return rtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rtc *RefreshTokenCreate) SetNillableCreatedAt(t *time.Time) *RefreshTokenCreate {
	if t != nil {
		rtc.SetCreatedAt(*t)
	}
	return rtc
}

// SetUpdatedAt sets the "updated_at" field.
func (rtc *RefreshTokenCreate) SetUpdatedAt(t time.Time) *RefreshTokenCreate {
	rtc.mutation.SetUpdatedAt(t)
	return rtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rtc *RefreshTokenCreate) SetNillableUpdatedAt(t *time.Time) *RefreshTokenCreate {
	if t != nil {
		rtc.SetUpdatedAt(*t)
	}
	return rtc
}

// SetID sets the "id" field.
func (rtc *RefreshTokenCreate) SetID(u uuid.UUID) *RefreshTokenCreate {
	rtc.mutation.SetID(u)
	return rtc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rtc *RefreshTokenCreate) SetNillableID(u *uuid.UUID) *RefreshTokenCreate {
	if u != nil {
		rtc.SetID(*u)
	}
	return rtc
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (rtc *RefreshTokenCreate) SetUsersID(id uuid.UUID) *RefreshTokenCreate {
	rtc.mutation.SetUsersID(id)
	return rtc
}

// SetUsers sets the "users" edge to the User entity.
func (rtc *RefreshTokenCreate) SetUsers(u *User) *RefreshTokenCreate {
	return rtc.SetUsersID(u.ID)
}

// Mutation returns the RefreshTokenMutation object of the builder.
func (rtc *RefreshTokenCreate) Mutation() *RefreshTokenMutation {
	return rtc.mutation
}

// Save creates the RefreshToken in the database.
func (rtc *RefreshTokenCreate) Save(ctx context.Context) (*RefreshToken, error) {
	rtc.defaults()
	return withHooks(ctx, rtc.sqlSave, rtc.mutation, rtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rtc *RefreshTokenCreate) SaveX(ctx context.Context) *RefreshToken {
	v, err := rtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rtc *RefreshTokenCreate) Exec(ctx context.Context) error {
	_, err := rtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtc *RefreshTokenCreate) ExecX(ctx context.Context) {
	if err := rtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rtc *RefreshTokenCreate) defaults() {
	if _, ok := rtc.mutation.IsClaimed(); !ok {
		v := refreshtoken.DefaultIsClaimed
		rtc.mutation.SetIsClaimed(v)
	}
	if _, ok := rtc.mutation.CreatedAt(); !ok {
		v := refreshtoken.DefaultCreatedAt()
		rtc.mutation.SetCreatedAt(v)
	}
	if _, ok := rtc.mutation.UpdatedAt(); !ok {
		v := refreshtoken.DefaultUpdatedAt()
		rtc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rtc.mutation.ID(); !ok {
		v := refreshtoken.DefaultID()
		rtc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtc *RefreshTokenCreate) check() error {
	if _, ok := rtc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "RefreshToken.token"`)}
	}
	if v, ok := rtc.mutation.Token(); ok {
		if err := refreshtoken.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "RefreshToken.token": %w`, err)}
		}
	}
	if _, ok := rtc.mutation.IsClaimed(); !ok {
		return &ValidationError{Name: "is_claimed", err: errors.New(`ent: missing required field "RefreshToken.is_claimed"`)}
	}
	if _, ok := rtc.mutation.ExpiredAt(); !ok {
		return &ValidationError{Name: "expired_at", err: errors.New(`ent: missing required field "RefreshToken.expired_at"`)}
	}
	if _, ok := rtc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "RefreshToken.user_id"`)}
	}
	if _, ok := rtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RefreshToken.created_at"`)}
	}
	if _, ok := rtc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "RefreshToken.updated_at"`)}
	}
	if len(rtc.mutation.UsersIDs()) == 0 {
		return &ValidationError{Name: "users", err: errors.New(`ent: missing required edge "RefreshToken.users"`)}
	}
	return nil
}

func (rtc *RefreshTokenCreate) sqlSave(ctx context.Context) (*RefreshToken, error) {
	if err := rtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rtc.mutation.id = &_node.ID
	rtc.mutation.done = true
	return _node, nil
}

func (rtc *RefreshTokenCreate) createSpec() (*RefreshToken, *sqlgraph.CreateSpec) {
	var (
		_node = &RefreshToken{config: rtc.config}
		_spec = sqlgraph.NewCreateSpec(refreshtoken.Table, sqlgraph.NewFieldSpec(refreshtoken.FieldID, field.TypeUUID))
	)
	if id, ok := rtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rtc.mutation.Token(); ok {
		_spec.SetField(refreshtoken.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := rtc.mutation.IsClaimed(); ok {
		_spec.SetField(refreshtoken.FieldIsClaimed, field.TypeBool, value)
		_node.IsClaimed = value
	}
	if value, ok := rtc.mutation.ExpiredAt(); ok {
		_spec.SetField(refreshtoken.FieldExpiredAt, field.TypeTime, value)
		_node.ExpiredAt = value
	}
	if value, ok := rtc.mutation.CreatedAt(); ok {
		_spec.SetField(refreshtoken.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rtc.mutation.UpdatedAt(); ok {
		_spec.SetField(refreshtoken.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := rtc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   refreshtoken.UsersTable,
			Columns: []string{refreshtoken.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RefreshTokenCreateBulk is the builder for creating many RefreshToken entities in bulk.
type RefreshTokenCreateBulk struct {
	config
	err      error
	builders []*RefreshTokenCreate
}

// Save creates the RefreshToken entities in the database.
func (rtcb *RefreshTokenCreateBulk) Save(ctx context.Context) ([]*RefreshToken, error) {
	if rtcb.err != nil {
		return nil, rtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rtcb.builders))
	nodes := make([]*RefreshToken, len(rtcb.builders))
	mutators := make([]Mutator, len(rtcb.builders))
	for i := range rtcb.builders {
		func(i int, root context.Context) {
			builder := rtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RefreshTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rtcb *RefreshTokenCreateBulk) SaveX(ctx context.Context) []*RefreshToken {
	v, err := rtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rtcb *RefreshTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := rtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtcb *RefreshTokenCreateBulk) ExecX(ctx context.Context) {
	if err := rtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
