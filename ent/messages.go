// Code generated by ent, DO NOT EDIT.

package ent

import (
	"automatic-doodle/ent/messages"
	"automatic-doodle/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Messages is the model entity for the Messages schema.
type Messages struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// From holds the value of the "from" field.
	From uuid.UUID `json:"from,omitempty"`
	// To holds the value of the "to" field.
	To uuid.UUID `json:"to,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MessagesQuery when eager-loading is set.
	Edges        MessagesEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MessagesEdges holds the relations/edges for other nodes in the graph.
type MessagesEdges struct {
	// Sender holds the value of the sender edge.
	Sender *User `json:"sender,omitempty"`
	// Receiver holds the value of the receiver edge.
	Receiver *User `json:"receiver,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SenderOrErr returns the Sender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessagesEdges) SenderOrErr() (*User, error) {
	if e.Sender != nil {
		return e.Sender, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "sender"}
}

// ReceiverOrErr returns the Receiver value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessagesEdges) ReceiverOrErr() (*User, error) {
	if e.Receiver != nil {
		return e.Receiver, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "receiver"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Messages) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case messages.FieldMessage:
			values[i] = new(sql.NullString)
		case messages.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case messages.FieldID, messages.FieldFrom, messages.FieldTo:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Messages fields.
func (m *Messages) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case messages.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				m.ID = *value
			}
		case messages.FieldFrom:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field from", values[i])
			} else if value != nil {
				m.From = *value
			}
		case messages.FieldTo:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field to", values[i])
			} else if value != nil {
				m.To = *value
			}
		case messages.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				m.Message = value.String
			}
		case messages.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Messages.
// This includes values selected through modifiers, order, etc.
func (m *Messages) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QuerySender queries the "sender" edge of the Messages entity.
func (m *Messages) QuerySender() *UserQuery {
	return NewMessagesClient(m.config).QuerySender(m)
}

// QueryReceiver queries the "receiver" edge of the Messages entity.
func (m *Messages) QueryReceiver() *UserQuery {
	return NewMessagesClient(m.config).QueryReceiver(m)
}

// Update returns a builder for updating this Messages.
// Note that you need to call Messages.Unwrap() before calling this method if this Messages
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Messages) Update() *MessagesUpdateOne {
	return NewMessagesClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Messages entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Messages) Unwrap() *Messages {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Messages is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Messages) String() string {
	var builder strings.Builder
	builder.WriteString("Messages(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("from=")
	builder.WriteString(fmt.Sprintf("%v", m.From))
	builder.WriteString(", ")
	builder.WriteString("to=")
	builder.WriteString(fmt.Sprintf("%v", m.To))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(m.Message)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MessagesSlice is a parsable slice of Messages.
type MessagesSlice []*Messages
