// Code generated by ent, DO NOT EDIT.

package ent

import (
	"automatic-doodle/ent/job"
	"automatic-doodle/ent/jobapplication"
	"automatic-doodle/ent/predicate"
	"automatic-doodle/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// JobApplicationUpdate is the builder for updating JobApplication entities.
type JobApplicationUpdate struct {
	config
	hooks    []Hook
	mutation *JobApplicationMutation
}

// Where appends a list predicates to the JobApplicationUpdate builder.
func (jau *JobApplicationUpdate) Where(ps ...predicate.JobApplication) *JobApplicationUpdate {
	jau.mutation.Where(ps...)
	return jau
}

// SetDescription sets the "description" field.
func (jau *JobApplicationUpdate) SetDescription(s string) *JobApplicationUpdate {
	jau.mutation.SetDescription(s)
	return jau
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (jau *JobApplicationUpdate) SetNillableDescription(s *string) *JobApplicationUpdate {
	if s != nil {
		jau.SetDescription(*s)
	}
	return jau
}

// SetUserID sets the "user_id" field.
func (jau *JobApplicationUpdate) SetUserID(u uuid.UUID) *JobApplicationUpdate {
	jau.mutation.SetUserID(u)
	return jau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (jau *JobApplicationUpdate) SetNillableUserID(u *uuid.UUID) *JobApplicationUpdate {
	if u != nil {
		jau.SetUserID(*u)
	}
	return jau
}

// SetJobID sets the "job_id" field.
func (jau *JobApplicationUpdate) SetJobID(u uuid.UUID) *JobApplicationUpdate {
	jau.mutation.SetJobID(u)
	return jau
}

// SetNillableJobID sets the "job_id" field if the given value is not nil.
func (jau *JobApplicationUpdate) SetNillableJobID(u *uuid.UUID) *JobApplicationUpdate {
	if u != nil {
		jau.SetJobID(*u)
	}
	return jau
}

// SetObjectKey sets the "object_key" field.
func (jau *JobApplicationUpdate) SetObjectKey(s string) *JobApplicationUpdate {
	jau.mutation.SetObjectKey(s)
	return jau
}

// SetNillableObjectKey sets the "object_key" field if the given value is not nil.
func (jau *JobApplicationUpdate) SetNillableObjectKey(s *string) *JobApplicationUpdate {
	if s != nil {
		jau.SetObjectKey(*s)
	}
	return jau
}

// ClearObjectKey clears the value of the "object_key" field.
func (jau *JobApplicationUpdate) ClearObjectKey() *JobApplicationUpdate {
	jau.mutation.ClearObjectKey()
	return jau
}

// SetUser sets the "user" edge to the User entity.
func (jau *JobApplicationUpdate) SetUser(u *User) *JobApplicationUpdate {
	return jau.SetUserID(u.ID)
}

// SetJob sets the "job" edge to the Job entity.
func (jau *JobApplicationUpdate) SetJob(j *Job) *JobApplicationUpdate {
	return jau.SetJobID(j.ID)
}

// Mutation returns the JobApplicationMutation object of the builder.
func (jau *JobApplicationUpdate) Mutation() *JobApplicationMutation {
	return jau.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (jau *JobApplicationUpdate) ClearUser() *JobApplicationUpdate {
	jau.mutation.ClearUser()
	return jau
}

// ClearJob clears the "job" edge to the Job entity.
func (jau *JobApplicationUpdate) ClearJob() *JobApplicationUpdate {
	jau.mutation.ClearJob()
	return jau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jau *JobApplicationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, jau.sqlSave, jau.mutation, jau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jau *JobApplicationUpdate) SaveX(ctx context.Context) int {
	affected, err := jau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jau *JobApplicationUpdate) Exec(ctx context.Context) error {
	_, err := jau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jau *JobApplicationUpdate) ExecX(ctx context.Context) {
	if err := jau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jau *JobApplicationUpdate) check() error {
	if v, ok := jau.mutation.Description(); ok {
		if err := jobapplication.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "JobApplication.description": %w`, err)}
		}
	}
	if jau.mutation.UserCleared() && len(jau.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "JobApplication.user"`)
	}
	if jau.mutation.JobCleared() && len(jau.mutation.JobIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "JobApplication.job"`)
	}
	return nil
}

func (jau *JobApplicationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := jau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobapplication.Table, jobapplication.Columns, sqlgraph.NewFieldSpec(jobapplication.FieldID, field.TypeUUID))
	if ps := jau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jau.mutation.Description(); ok {
		_spec.SetField(jobapplication.FieldDescription, field.TypeString, value)
	}
	if value, ok := jau.mutation.ObjectKey(); ok {
		_spec.SetField(jobapplication.FieldObjectKey, field.TypeString, value)
	}
	if jau.mutation.ObjectKeyCleared() {
		_spec.ClearField(jobapplication.FieldObjectKey, field.TypeString)
	}
	if jau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobapplication.UserTable,
			Columns: []string{jobapplication.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobapplication.UserTable,
			Columns: []string{jobapplication.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jau.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobapplication.JobTable,
			Columns: []string{jobapplication.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jau.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobapplication.JobTable,
			Columns: []string{jobapplication.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, jau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobapplication.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jau.mutation.done = true
	return n, nil
}

// JobApplicationUpdateOne is the builder for updating a single JobApplication entity.
type JobApplicationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobApplicationMutation
}

// SetDescription sets the "description" field.
func (jauo *JobApplicationUpdateOne) SetDescription(s string) *JobApplicationUpdateOne {
	jauo.mutation.SetDescription(s)
	return jauo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (jauo *JobApplicationUpdateOne) SetNillableDescription(s *string) *JobApplicationUpdateOne {
	if s != nil {
		jauo.SetDescription(*s)
	}
	return jauo
}

// SetUserID sets the "user_id" field.
func (jauo *JobApplicationUpdateOne) SetUserID(u uuid.UUID) *JobApplicationUpdateOne {
	jauo.mutation.SetUserID(u)
	return jauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (jauo *JobApplicationUpdateOne) SetNillableUserID(u *uuid.UUID) *JobApplicationUpdateOne {
	if u != nil {
		jauo.SetUserID(*u)
	}
	return jauo
}

// SetJobID sets the "job_id" field.
func (jauo *JobApplicationUpdateOne) SetJobID(u uuid.UUID) *JobApplicationUpdateOne {
	jauo.mutation.SetJobID(u)
	return jauo
}

// SetNillableJobID sets the "job_id" field if the given value is not nil.
func (jauo *JobApplicationUpdateOne) SetNillableJobID(u *uuid.UUID) *JobApplicationUpdateOne {
	if u != nil {
		jauo.SetJobID(*u)
	}
	return jauo
}

// SetObjectKey sets the "object_key" field.
func (jauo *JobApplicationUpdateOne) SetObjectKey(s string) *JobApplicationUpdateOne {
	jauo.mutation.SetObjectKey(s)
	return jauo
}

// SetNillableObjectKey sets the "object_key" field if the given value is not nil.
func (jauo *JobApplicationUpdateOne) SetNillableObjectKey(s *string) *JobApplicationUpdateOne {
	if s != nil {
		jauo.SetObjectKey(*s)
	}
	return jauo
}

// ClearObjectKey clears the value of the "object_key" field.
func (jauo *JobApplicationUpdateOne) ClearObjectKey() *JobApplicationUpdateOne {
	jauo.mutation.ClearObjectKey()
	return jauo
}

// SetUser sets the "user" edge to the User entity.
func (jauo *JobApplicationUpdateOne) SetUser(u *User) *JobApplicationUpdateOne {
	return jauo.SetUserID(u.ID)
}

// SetJob sets the "job" edge to the Job entity.
func (jauo *JobApplicationUpdateOne) SetJob(j *Job) *JobApplicationUpdateOne {
	return jauo.SetJobID(j.ID)
}

// Mutation returns the JobApplicationMutation object of the builder.
func (jauo *JobApplicationUpdateOne) Mutation() *JobApplicationMutation {
	return jauo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (jauo *JobApplicationUpdateOne) ClearUser() *JobApplicationUpdateOne {
	jauo.mutation.ClearUser()
	return jauo
}

// ClearJob clears the "job" edge to the Job entity.
func (jauo *JobApplicationUpdateOne) ClearJob() *JobApplicationUpdateOne {
	jauo.mutation.ClearJob()
	return jauo
}

// Where appends a list predicates to the JobApplicationUpdate builder.
func (jauo *JobApplicationUpdateOne) Where(ps ...predicate.JobApplication) *JobApplicationUpdateOne {
	jauo.mutation.Where(ps...)
	return jauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jauo *JobApplicationUpdateOne) Select(field string, fields ...string) *JobApplicationUpdateOne {
	jauo.fields = append([]string{field}, fields...)
	return jauo
}

// Save executes the query and returns the updated JobApplication entity.
func (jauo *JobApplicationUpdateOne) Save(ctx context.Context) (*JobApplication, error) {
	return withHooks(ctx, jauo.sqlSave, jauo.mutation, jauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jauo *JobApplicationUpdateOne) SaveX(ctx context.Context) *JobApplication {
	node, err := jauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jauo *JobApplicationUpdateOne) Exec(ctx context.Context) error {
	_, err := jauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jauo *JobApplicationUpdateOne) ExecX(ctx context.Context) {
	if err := jauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jauo *JobApplicationUpdateOne) check() error {
	if v, ok := jauo.mutation.Description(); ok {
		if err := jobapplication.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "JobApplication.description": %w`, err)}
		}
	}
	if jauo.mutation.UserCleared() && len(jauo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "JobApplication.user"`)
	}
	if jauo.mutation.JobCleared() && len(jauo.mutation.JobIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "JobApplication.job"`)
	}
	return nil
}

func (jauo *JobApplicationUpdateOne) sqlSave(ctx context.Context) (_node *JobApplication, err error) {
	if err := jauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobapplication.Table, jobapplication.Columns, sqlgraph.NewFieldSpec(jobapplication.FieldID, field.TypeUUID))
	id, ok := jauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "JobApplication.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobapplication.FieldID)
		for _, f := range fields {
			if !jobapplication.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != jobapplication.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jauo.mutation.Description(); ok {
		_spec.SetField(jobapplication.FieldDescription, field.TypeString, value)
	}
	if value, ok := jauo.mutation.ObjectKey(); ok {
		_spec.SetField(jobapplication.FieldObjectKey, field.TypeString, value)
	}
	if jauo.mutation.ObjectKeyCleared() {
		_spec.ClearField(jobapplication.FieldObjectKey, field.TypeString)
	}
	if jauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobapplication.UserTable,
			Columns: []string{jobapplication.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobapplication.UserTable,
			Columns: []string{jobapplication.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jauo.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobapplication.JobTable,
			Columns: []string{jobapplication.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jauo.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobapplication.JobTable,
			Columns: []string{jobapplication.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &JobApplication{config: jauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobapplication.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jauo.mutation.done = true
	return _node, nil
}
